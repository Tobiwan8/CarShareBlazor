@page "/add-car"

@attribute [Authorize(Roles = "Admin,User")]
@inject NavigationManager navMan;

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <EditForm Model="@Model" OnValidSubmit="AddCarAsync" FormName="AddCarForm">
            <DataAnnotationsValidator />
            <div class="mb-3" text-center flex-column>
                <img src="/favicon.png" style="max-height:5rem" />
                <h3>Add Car</h3>
            </div>
            <div class="mb-3">
                <label>Car Name</label>
                <InputText @bind-Value="Model.Name" class="form-control" placeholder="Name" />
                <ValidationMessage For="() => Model.Name" />
            </div>
            <div class="mb-3">
                <label>Licenseplate</label>
                <InputText @bind-Value="Model.Licenseplate" placeholder="Licenseplate" class="form-control" />
                <ValidationMessage For="() => Model.Licenseplate" />
            </div>
            <div class="mb-3 text-center">
                <span class="text-danger">@errorMessage</span>
            </div>
            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary">Add</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    public AddCarViewModel Model { get; set; } = new();

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    private string? errorMessage;

    private int personID;

    private AddCar? addCar;
    private AddCarDTO? addCarDTO;

    private async Task AddCarAsync()
    {
        var authenticationState = await authenticationStateTask!;
        var personIdClaim = authenticationState.User.FindFirst("PersonID");
        if (personIdClaim is not null)
        {
            personID = Convert.ToInt32(personIdClaim.Value);
        }

        addCarDTO = new()
        {
            Name = Model.Name,
            Licenseplate = Model.Licenseplate,
            PersonID = personID
        };

        addCar = new();

        string? response = await addCar.AddCarAsync(addCarDTO);

        if(response != "ok")
        {
            errorMessage = "something went wrong with adding car";
            return;
        }

        navMan.NavigateTo("/owned-cars");
    }
}
