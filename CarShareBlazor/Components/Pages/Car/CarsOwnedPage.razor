@page "/owned-cars"

@inject NavigationManager navMan
@inject IJSRuntime js
@attribute [Authorize(Roles = "Admin,User")]
@rendermode InteractiveServer

<h3>Owned Cars</h3>
@if(carsOwnedList == null || !carsOwnedList.Any())
{
    <span>you currently don't own any cars</span>
}
else
{
    <div class="cars-table">
        <table class="table">
            <thead style="background:white">
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Licenseplate</th>
                </tr>
            </thead>
            <tbody class="tbody">
                @foreach (CarModel car in carsOwnedList!)
                {
                    <tr @onclick="() => SelectRow(car.ID)" style="cursor:pointer; @SelectRowColor(car.ID)">
                        <td>@car.ID</td>
                        <td>@car.Name</td>
                        <td>@car.Licenseplate</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
<br />
<button class="btn btn-primary" @onclick="GoToAddCar">Add Car</button>

@if(carSelected is not null)
{
    <div class="car-selected-container">
        <div style="width:50%">
            <div class="car-chosen">
                <div>
                    <label>ID:</label>
                    <input type="number" @bind="carSelectedForEdit!.ID" disabled="disabled" />
                </div>
                <div>
                    <label>Name</label>
                    <input @bind="carSelectedForEdit.Name" disabled="@isEditDisabled" />
                </div>
                <div>
                    <label>Licenceplate</label>
                    <input @bind="carSelectedForEdit.Licenseplate" disabled="@isEditDisabled" />
                </div>
                @if (isEditDisabled)
                {
                    <button class="btn btn-primary" @onclick="EditCarBtn">Edit</button>
                }
                else
                {
                    <div class="edit-buttons-container">
                        <div>
                            <button class="btn btn-danger" @onclick="DeleteCarBtn">Delete Car</button>
                        </div>
                        <div>
                            <button class="btn btn-primary" @onclick="EditCarBtn">Cancel</button>
                            <button class="btn btn-primary" @onclick="EditCarAsync">Update</button>
                        </div>
                    </div>
                }
            </div>
        </div>
        <div class="cars-selected-table">
            <h5>Car users for @carSelected.Name</h5>
            @if (carUsersList is null || !carUsersList.Any())
            {
                <span>This car currently has no users</span>
                <br />
            }
            else
            {
                <table class="table">
                    <thead style="background:white">
                        <tr>
                            <th>ID</th>
                            <th>Name</th>
                            <th>Last name</th>
                            <th class="table-actions">Actions</th>
                        </tr>
                    </thead>
                    <tbody class="tbody">
                        @foreach (PersonModel person in carUsersList)
                        {
                            <tr>
                                <td>@person.ID</td>
                                <td>@person.FirstName</td>
                                <td>@person.LastName</td>
                                <td class="table-actions"><button class="btn btn-danger" @onclick="() => RemovePerson(person.ID)">Remove</button></td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            <button class="btn btn-primary" @onclick="AddPersonActivate">Add User</button>
            <div class="all-search-container">
                @if (isAddPersonDisabled)
                {
                    <div class="search-user-container">
                        <label>Search Username: </label>
                        <input @bind="searchUserName"/> 
                        <button class="btn btn-primary" @onclick="() => SearchForPersonByUserName(searchUserName)">Search</button>
                    </div>
                    <div class="search-user-container">
                        @if (getPersonByUserNameDTO is not null)
                        {
                            <div class="found-person">
                                <span><b>@searchUserName</b></span>
                                <span>@getPersonByUserNameDTO.FirstName</span>
                                <span>@getPersonByUserNameDTO.LastName</span>
                                <button class="btn btn-primary" @onclick="AddUserToCar">Add</button>
                            </div>
                        }
                        else if (hasUserNameBeenSearched == true && getPersonByUserNameDTO is null)
                        {
                            <span>This user does not exist</span>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    private GetOwnedCars? getOwnedCars;

    private List<CarModel>? carsOwnedList;
    private CarModel? carSelected;
    private CarModel? carSelectedForEdit;

    private EditCar? editCar;
    private EditCarDTO? editCarDTO;

    private DeleteCar? deleteCar;

    private List<PersonModel>? carUsersList;
    private GetCarUsers? getCarUsers;
    private DeletePersonCar? deletePersonCar;

    private GetPersonByUserNameDTO? getPersonByUserNameDTO;
    private GetPersonByUserName? getPersonByUserName;

    private AddPersonCarDTO? addPersonCarDTO;
    private AddPersonCar? addPersonCar;

    private int personID;
    private bool isEditDisabled;
    private bool isAddPersonDisabled;
    private string? searchUserName;
    private bool hasUserNameBeenSearched;

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await authenticationStateTask!;
        var userIdClaim = authenticationState.User.FindFirst("personID");
        if(userIdClaim is not null)
        {
            personID = Convert.ToInt32(userIdClaim.Value);
        }

        isEditDisabled = true;

        getOwnedCars = new();
        carsOwnedList = new();
        carsOwnedList = await getOwnedCars.GetOwnedCarsAsync(personID);
    }

    private async Task SelectRow(int carID)
    {
        if (isEditDisabled == false)
        {
            isEditDisabled = true;
        }

        isAddPersonDisabled = false;
        searchUserName = null;
        getPersonByUserNameDTO = null;


        carSelected = carsOwnedList!.FirstOrDefault(c => c.ID == carID);
        carSelectedForEdit = new()
        {
            ID = carSelected!.ID,
            Name = carSelected.Name,
            Licenseplate = carSelected.Licenseplate
        };

        getCarUsers = new();
        carUsersList = await getCarUsers.GetCarUsersAsync(carSelected.ID);

        StateHasChanged();
    }

    private string SelectRowColor(Int64 id)
    {
        if (carSelected != null && id == carSelected.ID)
        {
            return "background:#4CBFE1";
        }
        return "";
    }

    private void GoToAddCar()
    {
        navMan.NavigateTo("/add-car");
    }

    private void EditCarBtn()
    {
        carSelectedForEdit!.ID = carSelected!.ID;
        carSelectedForEdit.Name = carSelected.Name;
        carSelectedForEdit.Licenseplate = carSelected.Licenseplate;
        isEditDisabled = !isEditDisabled;
    }

    private async Task EditCarAsync()
    {
        editCarDTO = new()
        {
            ID = carSelectedForEdit!.ID,
            Name = carSelectedForEdit.Name,
            Licenseplate = carSelectedForEdit.Licenseplate
        };

        editCar = new();
        string? response = await editCar.EditCarAsync(editCarDTO);

        if(response != "ok")
        {
            await js.InvokeVoidAsync("alert", "Something went wrong. Please make sure that licenseplate is correct");
            return;
        }

        carSelected!.ID = carSelectedForEdit!.ID;
        carSelected.Name = carSelectedForEdit.Name;
        carSelected.Licenseplate = carSelectedForEdit.Licenseplate;

        isEditDisabled = !isEditDisabled;

        await js.InvokeVoidAsync("alert", "Car has been successfully updated");
    }

    private async Task DeleteCarBtn()
    {
        bool answer = await js.InvokeAsync<bool>("confirm", "Are you sure you want to delete this car?");
        if (!answer)
        {
            await js.InvokeVoidAsync("alert", "Deleting canceled");
            return;
        }

        deleteCar = new();
        string? response = await deleteCar.DeleteCarAsync(carSelected!.ID);
        if(response != "ok")
        {
            await js.InvokeVoidAsync("alert", "Something went wrong");
            return;
        }

        carsOwnedList!.RemoveAt(carsOwnedList!.FindIndex(c => c.ID == carSelected!.ID));

        carSelected = null;

        await js.InvokeVoidAsync("alert", "Car has been successfully deleted");
    }

    private async Task RemovePerson(int personID)
    {
        bool answer = await js.InvokeAsync<bool>("confirm", "Are you sure you want to remove this person from using the car?");
        if (!answer)
        {
            return;
        }
        deletePersonCar = new();
        string? response = await deletePersonCar.DeletePersonCarAsync(personID, carSelected!.ID);

        if(response != "ok")
        {
            await js.InvokeVoidAsync("alert", "Something went wrong");
            return;
        }

        carUsersList!.RemoveAt(carUsersList!.FindIndex(p => p.ID == personID));

        await js.InvokeVoidAsync("alert", "Person has been removed from your car");
    }

    private void AddPersonActivate()
    {
        isAddPersonDisabled = !isAddPersonDisabled;
        hasUserNameBeenSearched = false;
    }

    private async Task SearchForPersonByUserName(string userName)
    {
        getPersonByUserName = new();
        getPersonByUserNameDTO = await getPersonByUserName.GetPersonByUserNameAsync(userName);
        hasUserNameBeenSearched = true;
    }

    private async Task AddUserToCar()
    {
        bool answer = await js.InvokeAsync<bool>("confirm", "are you sure you want to add this user to your car?");

        if (!answer)
        {
            return;
        }

        addPersonCarDTO = new()
        {
            personID = getPersonByUserNameDTO!.ID,
            carID = carSelected!.ID
        };

        addPersonCar = new();
        string? response = await addPersonCar.AddPersonCarAsync(addPersonCarDTO);

        if(response != "ok")
        {
            await js.InvokeVoidAsync("alert", "Something went wrong");
            return;
        }

        await js.InvokeVoidAsync("alert", "User has been added to your car");

        await SelectRow(carSelected.ID);
    }
}
