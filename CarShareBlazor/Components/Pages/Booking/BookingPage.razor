@page "/bookings"

@inject NavigationManager navMan
@inject IJSRuntime js
@attribute [Authorize(Roles = "Admin,User")]
@rendermode InteractiveServer

<h3>Bookings</h3>
@if (personBookings == null || !personBookings.Any())
{
    <span>you currently don't own any cars</span>
    <br />
}
else
{
    <div class="bookings-table">
        <table class="table">
            <thead style="background:white">
                <tr>
                    <th>ID</th>
                    <th>Car</th>
                    <th>Start date</th>
                    <th>End date</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody class="tbody">
                @foreach (PersonBookingDTO booking in personBookings)
                {
                    <tr @onclick="() => SelectRow(booking.ID)" style="cursor:pointer; @SelectRowColor(booking.ID);">
                        <td>@booking.ID</td>
                        <td>@booking.CarName</td>
                        <td>@booking.StartDate</td>
                        <td>@booking.EndDate</td>
                        <td><button class="btn btn-danger" @onclick="() => RemoveBooking(booking.ID)">Remove</button></td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
<br />
<button class="btn btn-primary" @onclick="GoToAddBooking">Add Booking</button>

@if(bookingSelected is not null && bookingForEdit is not null)
{
    <div class="edit-container">
        <input @bind="bookingSelected.CarName" disabled="disabled"/>
        <input type="date" @bind="bookingForEdit.StartDate" disabled="@isEditDisabled" />
        <input type="date" @bind="bookingForEdit.EndDate" disabled="@isEditDisabled" />
        <div>
            <button class="btn btn-primary" @onclick="() => isEditDisabled = !isEditDisabled">Edit</button>
            @if (isEditDisabled)
            {
                <button class="btn btn-primary" @onclick="() => UpdateBooking(bookingSelected.ID)">Confirm</button>
            }
        </div>
    </div>
}

@code{
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    private GetPersonBookings? getPersonBookings;
    private List<PersonBookingDTO>? personBookings;

    private PersonBookingDTO? bookingSelected;
    private PersonBookingDTO? bookingForEdit;

    private DeleteBooking? deleteBooking;

    private EditBooking? editBooking;
    private EditBookingDTO? editBookingDTO;

    private int personID;
    private bool isEditDisabled;

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await authenticationStateTask!;
        var userIdClaim = authenticationState.User.FindFirst("personID");
        if (userIdClaim is not null)
        {
            personID = Convert.ToInt32(userIdClaim.Value);
        }


        getPersonBookings = new();
        personBookings = new();
        personBookings = await getPersonBookings.GetPersonBookingsAsync(personID);
    }

    private void SelectRow(int bookingID)
    {
        bookingSelected = personBookings!.FirstOrDefault(b => b.ID == bookingID);
        bookingForEdit = new()
        {
            ID = bookingSelected!.ID,
            StartDate = bookingSelected.StartDate,
            EndDate = bookingSelected.EndDate
        };
    }

    private string SelectRowColor(int id)
    {
        if (bookingSelected != null && id == bookingSelected.ID)
        {
            return "background:#4CBFE1";
        }
        return "";
    }

    private void GoToAddBooking()
    {
        navMan.NavigateTo("/add-booking");
    }

    private async Task RemoveBooking(int bookingID)
    {
        bool answer = await js.InvokeAsync<bool>("confirm", "Are you sure you want to delete booking?");

        if (!answer)
        {
            return;
        }

        deleteBooking = new();
        string? response = await deleteBooking.DeleteBookingAsync(bookingID);

        if(response != "ok")
        {
            await js.InvokeVoidAsync("alert", "something went wrong");
            return;
        }

        personBookings!.RemoveAt(personBookings.FindIndex(b => b.ID == bookingID));

        await js.InvokeVoidAsync("alert", "Booking has been deleted");

        StateHasChanged();
    }

    private async Task UpdateBooking(int bookingID)
    {
        editBookingDTO = new()
        {
            ID = bookingForEdit!.ID,
            StartDate = bookingForEdit.StartDate,
            EndDate = bookingForEdit.EndDate
        };

        editBooking = new();
        string? response = await editBooking.EditBookingAsync(editBookingDTO);

        if (response != "ok")
        {
            await js.InvokeVoidAsync("alert", "This car is not available in the requested time period");
            return;
        }

        await js.InvokeVoidAsync("alert", "Booking has been successfully updated");

        StateHasChanged();
    }
}