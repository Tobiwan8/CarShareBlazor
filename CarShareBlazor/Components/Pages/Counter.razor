@page "/counter"
@rendermode InteractiveServer
@inject IJSRuntime js
@attribute [Authorize(Roles = "Admin,User")]

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

<AuthorizeView>
    <Authorized>
        <br /><br />
        <button class="btn btn-primary" @onclick="DisplayGreetingAlert">Display Greeting Alert</button>
    </Authorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    private int currentCount = 0;
    private string? userID;
    private string? personID;

    private void IncrementCount()
    {
        currentCount++;
    }

    private async Task DisplayGreetingAlert()
    {
        var authenticationState = await authenticationStateTask!;
        var userIdClaim = authenticationState.User.FindFirst("UserID");
        if (userIdClaim != null)
        {
            userID = userIdClaim.Value;
        }
        else
        {
            userID = "User ID not found"; // Handle if the user ID claim is not present
        }

        var personIdClaim = authenticationState.User.FindFirst("personID");
        if (personIdClaim != null)
        {
            personID = personIdClaim.Value;
        }
        else
        {
            userID = "Person ID not found"; // Handle if the user ID claim is not present
        }

        string message = $"Hello {authenticationState.User.Identity!.Name} {userID} {personID}";

        await js.InvokeVoidAsync("alert", message);
    }
}
