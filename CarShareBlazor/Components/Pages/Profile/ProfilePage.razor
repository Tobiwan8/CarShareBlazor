@page "/profile"

@inject NavigationManager navMan
@inject IJSRuntime js
@attribute [Authorize(Roles = "Admin,User")]
@rendermode InteractiveServer

<div class="profile-container">
    <div>
        <h3>Profile</h3>
    </div>
    <div class="profile-props">
        <img src="/Images/profile-picture.png" class="profile-picture"/>
        <div class="card">
            <span class="fw-bolder">@userModel!.UserName</span>
            <span class="fw-bold">@personModel!.FirstName @personModel!.LastName</span>
        </div>
    </div>
    <a class="btn btn-primary" href="/edit-profile" style="width:200px">Edit Profile</a>
    <button class="btn btn-primary" @onclick="DeleteUser" style="width:200px; margin-top: 5px; background:red; color:black;">Delete Profile</button>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    private CheckIfUserHasPerson? findPerson;
    private GetUserByID? getUserByID;

    private UserModel? userModel;
    private PersonModel? personModel;

    private DeleteProfile? deleteProfile;

    private int userID;

    protected override async Task OnInitializedAsync()
    {
        userModel = new();
        personModel = new();

        var authenticationState = await authenticationStateTask!;
        var userIdClaim = authenticationState.User.FindFirst("UserID");
        if (userIdClaim != null)
        {
            userID = Convert.ToInt32(userIdClaim.Value);
            findPerson = new();
            personModel = await findPerson.CheckIfUserHasPersonAsync(userID);
            getUserByID = new();
            userModel = await getUserByID.GetUserByIDAsync(userID);

            EditProfileService.Profile!.UserID = userModel!.ID;
            EditProfileService.Profile.UserName = userModel.UserName;
            EditProfileService.Profile.Password = userModel.Password;
            EditProfileService.Profile.ConfirmPassword = userModel.Password;
            EditProfileService.Profile.Role = userModel.Role;
            EditProfileService.Profile.PersonID = personModel!.ID;
            EditProfileService.Profile.FirstName = personModel.FirstName;
            EditProfileService.Profile.LastName = personModel.LastName;
        }
    }

    private async Task DeleteUser()
    {
        var authenticationState = await authenticationStateTask!;
        var userIdClaim = authenticationState.User.FindFirst("UserID");
        if (userIdClaim != null)
        {
            userID = Convert.ToInt32(userIdClaim.Value);

            bool answer = await js.InvokeAsync<bool>("confirm", "Are you sure you want to delete? All of your records will be lost!");
            if (!answer)
            {
                return;
            }

            deleteProfile = new();
            string? response = await deleteProfile.DeleteUserAsync(userID);
            if(response != "ok")
            {
                await js.InvokeVoidAsync("alert", "Something went wrong");
                return;
            }

            navMan.NavigateTo("/delete");
        }
    }
}