@page "/edit-profile"

@inject NavigationManager navMan
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize(Roles = "Admin,User")]
@attribute [RequireAntiforgeryToken(required: false)]

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <EditForm Model="@EditProfileVM" OnValidSubmit="EditProfileAsync" FormName="EditProfileForm">
            <DataAnnotationsValidator />
            <div class="mb-3" text-center flex-column>
                <img src="/Images/profile-picture.png" style="max-height:5rem" />
                <h3>Edit Profile</h3>
            </div>
            <div class="mb-3">
                <label>User Name</label>
                <InputText @bind-Value="EditProfileVM!.UserName" class="form-control" placeholder="Username" />
                <ValidationMessage For="() => EditProfileVM.UserName" />
            </div>
            <div style="display: none">
                <InputNumber @bind-Value="EditProfileVM.UserID"/>
            </div>
            <div style="display: none">
                <InputNumber @bind-Value="EditProfileVM.PersonID" />
            </div>
            <div style="display: none">
                <InputText @bind-Value="EditProfileVM.Role" />
            </div>
            <div class="mb-3">
                <label>Password</label>
                <InputText @bind-Value="EditProfileVM.Password" placeholder="Password" type="password" class="form-control" />
                <ValidationMessage For="() => EditProfileVM.Password" />
            </div>
            <div class="mb-3">
                <label>Confirm Password</label>
                <InputText @bind-Value="EditProfileVM.ConfirmPassword" placeholder="Password" type="password" class="form-control" />
                <ValidationMessage For="() => EditProfileVM.ConfirmPassword" />
            </div>
            <div class="mb-3">
                <label>First Name</label>
                <InputText @bind-Value="EditProfileVM.FirstName" class="form-control" placeholder="First name" />
                <ValidationMessage For="() => EditProfileVM.FirstName" />
            </div>
            <div class="mb-3">
                <label>Last Name</label>
                <InputText @bind-Value="EditProfileVM.LastName" placeholder="Last name" class="form-control" />
                <ValidationMessage For="() => EditProfileVM.LastName" />
            </div>
            <div class="mb-3 text-center">
                <span class="text-danger">@errorMessage</span>
            </div>
            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary">Edit</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    [SupplyParameterFromForm]
    public EditProfileViewModel? EditProfileVM { get; set; } = new()
    {
        UserID = EditProfileService.Profile!.UserID,
        UserName = EditProfileService.Profile.UserName,
        Password = EditProfileService.Profile.Password,
        ConfirmPassword = EditProfileService.Profile.ConfirmPassword,
        Role = EditProfileService.Profile.Role,
        PersonID = EditProfileService.Profile.PersonID,
        FirstName = EditProfileService.Profile.FirstName,
        LastName = EditProfileService.Profile.LastName
    };

    private UserModel? userModel;

    private UserModel? editUserModel;
    private EditUser? editUser;

    private EditPersonDTO? editPersonDTO;
    private EditPerson? editPerson;

    private string? errorMessage;

    private async Task EditProfileAsync()
    {
        if(CheckForUserChanges())
        {
            editUserModel = new()
            {
                ID = EditProfileVM!.UserID,
                UserName = EditProfileVM!.UserName,
                Password = EditProfileVM.Password,
                Role = "User"
            };

            editUser = new();
            try
            {
                userModel = await editUser.EditUserAsync(editUserModel);
            }
            catch
            {
                errorMessage = "Something went wrong with the editing of your User";
                return;
            }

            await UpdateUserNameClaim(editUserModel.UserName!);
        }

        if (CheckForPersonChanges())
        {
            editPersonDTO = new()
            {
                ID = EditProfileVM!.PersonID,
                FirstName = EditProfileVM!.FirstName,
                LastName = EditProfileVM.LastName
            };

            editPerson = new();
            string? response = await editPerson.EditPersonAsync(editPersonDTO);
            if (response != "ok")
            {
                errorMessage = "Something went wrong with the editing of your Person";
                return;
            }

            EditProfileService.Profile!.UserID = 0;
            EditProfileService.Profile.UserName = null;
            EditProfileService.Profile.Password = null;
            EditProfileService.Profile.ConfirmPassword = null;
            EditProfileService.Profile.Role = null;
            EditProfileService.Profile.PersonID = 0;
            EditProfileService.Profile.FirstName = null;
            EditProfileService.Profile.LastName = null;

        }
        navMan.NavigateTo("/profile");
    }

    private bool CheckForUserChanges()
    {
        return EditProfileVM!.UserName != EditProfileService.Profile!.UserName || EditProfileVM.Password != EditProfileService.Profile.Password;
    }

    private bool CheckForPersonChanges()
    {
        return EditProfileVM!.FirstName != EditProfileService.Profile!.FirstName || EditProfileVM.LastName != EditProfileService.Profile.LastName;
    }

    private async Task UpdateUserNameClaim(string newUserName)
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;

        var existingUserNameClaim = user.FindFirst(ClaimTypes.Name);

        if (existingUserNameClaim != null)
        {
            // Replace the existing UserName claim with the new value
            var newUserNameClaim = new Claim(ClaimTypes.Name, newUserName);
            var identity = (ClaimsIdentity)user.Identity!;
            identity.RemoveClaim(existingUserNameClaim); // Remove the existing claim
            identity.AddClaim(newUserNameClaim); // Add the new claim
        }
    }
}
