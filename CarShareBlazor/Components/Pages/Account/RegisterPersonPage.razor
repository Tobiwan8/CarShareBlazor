@page "/registerperson"

@inject NavigationManager navMan
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize(Roles = "Admin,User")]
@attribute [RequireAntiforgeryToken(required: false)]

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <EditForm Model="@RegisterPersonModel" OnValidSubmit="RegisterPersonAsync" FormName="RegisterPersonForm">
            <DataAnnotationsValidator />
            <div class="mb-3" text-center flex-column>
                <img src="/favicon.png" style="max-height:5rem" />
                <h3>Register Person</h3>
            </div>
            <div class="mb-3">
                <label>First Name</label>
                <InputText @bind-Value="RegisterPersonModel.FirstName" class="form-control" placeholder="First name" />
                <ValidationMessage For="() => RegisterPersonModel.FirstName" />
            </div>
            <div class="mb-3">
                <label>Last Name</label>
                <InputText @bind-Value="RegisterPersonModel.LastName" placeholder="Last name" class="form-control" />
                <ValidationMessage For="() => RegisterPersonModel.LastName" />
            </div>
            <div class="mb-3 text-center">
                <span class="text-danger">@errorMessage</span>
            </div>
            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary">Register</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    [SupplyParameterFromForm]
    public RegisterPersonViewModel RegisterPersonModel { get; set; } = new();

    private RegisterPerson? registerPerson;
    private PersonModel? personModel;
    private CheckIfUserHasPerson? hasPerson;

    private string? errorMessage;
    private int userID;
    private bool isRegisterSuccess;

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await authenticationStateTask!;
        var userIdClaim = authenticationState.User.FindFirst("UserID");
        if (userIdClaim != null)
        {
            userID = Convert.ToInt32(userIdClaim.Value);
        }

        hasPerson = new();
        personModel = await hasPerson.CheckIfUserHasPersonAsync(userID);

        if(personModel != null)
        {
            navMan.NavigateTo("/", true);                
        }
    }

    private async Task RegisterPersonAsync()
    {

        RegisterPersonDTO personDTO = new()
        {
            FirstName = RegisterPersonModel.FirstName,
            LastName = RegisterPersonModel.LastName,
            UserID = userID
        };

        try
        {
            registerPerson = new();
            string? response = await registerPerson.RegisterUserAsync(personDTO);

            if(response != "ok")
            {
                errorMessage = "Something went wrong. Please try something else";
                return;
            }
            isRegisterSuccess = true;
        }
        catch (Exception e)
        {
            errorMessage = $"an error as occured: {e.Message}";
        }

        if (isRegisterSuccess)
        {
            await UpdatePersonIDClaim();

            navMan.NavigateTo("/");
        }
    }

    private async Task UpdatePersonIDClaim()
    {
        personModel = await hasPerson!.CheckIfUserHasPersonAsync(userID);

        if (personModel is null)
        {
            errorMessage = "Something went wrong with registering";
            return;
        }

        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;

        var existingPersonIDClaim = user.FindFirst("personID");

        if (existingPersonIDClaim is not null)
        {
            var newPersonIDClaim = new Claim("personID", personModel.ID.ToString());
            var userClaimsIdentity = (ClaimsIdentity)user.Identity!;
            userClaimsIdentity.RemoveClaim(existingPersonIDClaim); // Remove the existing claim
            userClaimsIdentity.AddClaim(newPersonIDClaim); // Add the new claim
        }

        var claims = ((ClaimsIdentity)user.Identity!).Claims;
        var newIdentity = new ClaimsIdentity(claims, "ApplicationCookie");
        var principal = new ClaimsPrincipal(newIdentity);
        await HttpContext!.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, principal);
    }
}
