@page "/register-user"
@using CarShareBlazor.Models.DTOs

@inject NavigationManager navMan
@* @inject ProtectedSessionStorage storage *@

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <EditForm Model="@RegisterModel" OnValidSubmit="AuthenticateAsync" FormName="RegisterForm">
            <DataAnnotationsValidator />
            <div class="mb-3" text-center flex-column>
                <img src="/favicon.png" style="max-height:5rem" />
                <h3>Register</h3>
            </div>
            <div class="mb-3">
                <label>User Name</label>
                <InputText @bind-Value="RegisterModel.UserName" class="form-control" placeholder="Username" />
                <ValidationMessage For="() => RegisterModel.UserName" />
            </div>
            <div class="mb-3">
                <label>Password</label>
                <InputText @bind-Value="RegisterModel.Password" placeholder="Password" type="password" class="form-control" />
                <ValidationMessage For="() => RegisterModel.Password" />
            </div>
            <div class="mb-3">
                <label>Confirm Password</label>
                <InputText @bind-Value="RegisterModel.ConfirmPassword" placeholder="Password" type="password" class="form-control" />
                <ValidationMessage For="() => RegisterModel.ConfirmPassword" />
            </div>
            <div class="mb-3 text-center">
                <span class="text-danger">@errorMessage</span>
            </div>
            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary">Register</button>
            </div>
        </EditForm>
    </div>
</div>
<button @onclick="GoToHomePage" class="btn btn-primary">navigate</button>
<span> <a class="fw-bolder" href="/">click here</a></span>

@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    [SupplyParameterFromForm]
    public RegisterViewModel RegisterModel { get; set; } = new();

    private string? errorMessage;
    private RegisterUser? registerUser;

    private async Task AuthenticateAsync()
    {
        GetUserLoginDTO userDTO = new()
            {
                UserName = RegisterModel.UserName,
                Password = RegisterModel.Password
            };

        if (RegisterModel.Password != RegisterModel.ConfirmPassword)
        {
            errorMessage = "passwords do not match";
            return;
        }
        registerUser = new();

        try
        {
            UserModel? userAccount = await registerUser.RegisterUserAsync(userDTO);

            if (userAccount is null)
            {
                errorMessage = "Username already exists";
                return;
            }

            var claims = new List<Claim>
            {
                new Claim(ClaimTypes.Name, RegisterModel.UserName!),
                new Claim(ClaimTypes.Role, userAccount.Role!)
            };

            var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
            var principal = new ClaimsPrincipal(identity);
            await HttpContext!.SignInAsync(principal);

            // await storage.SetAsync("UserID", userAccount.ID);
            StateHasChanged();
            navMan.NavigateTo("/login"); //Go to register person
        }
        catch (Exception e)
        {
            errorMessage = $"Failed to navigate to home page: {e.Message}";
        }
    }

    private void GoToHomePage()
    {
        navMan.NavigateTo("/", true);
    }
}
